#include "ui/menudef.h"

/*
	Items are grouped together using a menuDef. A menudef typically has a name, a rect, a fullscreen option and a visible option
	menuDef {
		name "my_cool_menu_def"
		rect x-pos y-pos width height x-alignment y-alignment
		fullscreen 0|1
		visible (boolean expression)
	}

	within these menuDefs are itemDefs, these contain options and parameter specific to a hud element
	itemDef {
		name "my_cool_item_def"
		rect x-pos y-pos width height x-alignment y-alignment
		fullsceen (bool (expression)))
		visible (bool or boolean expression)
		forecolor r g b a ?
		textscale (float)
		textstyle (enum ?)
		text font (enum ?)
		textalign (enum ? )
		background (texture name ?) 
		exp (can be a variety of functions, multiple are allowed per itemDef)
		visible (boolean)
	}

	multiple exp's (expressions?) can belong to one itemDef, and typically have the following functions
		W(float) - dynamically calculate width
		H(float) - dynamically calculate height
		X(float) - dynamically calculate X-pos
		Y(float) - dynamically calculate y-pos
		text(string) - dynamically alter text

	some formatting functions:
		locString() - Grab localized string from key (key MUST start with "<str_filename>_" 
			where <str_filename> is the name of the .str file that holds the key/value pair)
		toUpper() - Capitalize first letter of each word in a string
		dvarString() - get dvar value as a string
		dvarBool() - get dvar value as a bool
		dvarInt() - get dvar value as an int

*/

{
	assetGlobalDef
	{
		fadeClamp						1
		fadeCycle						1
		fadeAmount						.1
	}

	menuDef
	{
		name				"practice_stats"
		rect				0 50 0 0 HORIZONTAL_ALIGN_USER_LEFT VERTICAL_ALIGN_USER_TOP //x-pos y-pos width height horizontal_alignment vertical_alignmnet
		fullscreen			0
		visible				1 

		itemDef
		{
			name				"enemy_counter_text"
			type				ITEM_TYPE_TEXT
			rect 				4 2 0 0			
			forecolor			1 1 1 1
			textscale			TEXTSIZE_DEFAULT
			textstyle			ITEM_TEXTSTYLE_SHADOWED
			textfont			UI_FONT_NORMAL
			textalign			ITEM_ALIGN_TOP_LEFT
			exp 				text(locString("MOD_ENEMIES_REMAINING") + dvarString("st_hud_enemy_counter_value"))	
			visible				when(dvarInt(st_hud_enemy_counter_on) > 0)
			decoration
		}

		itemDef 
		{
			name				"sph_text"
			type				ITEM_TYPE_TEXT
			rect 				4 2 0 0		
			exp					rect Y( 2 + (dvarInt(st_hud_enemy_counter_on) ) * 15 )
			exp 				text(locString("MOD_SPH") + dvarString("st_hud_sph"))		//multiple exp's (expressions?) can be defined for different functions
			forecolor			1 1 1 1
			textscale			TEXTSIZE_DEFAULT
			textstyle			ITEM_TEXTSTYLE_SHADOWED
			textfont			UI_FONT_NORMAL
			textalign			ITEM_ALIGN_TOP_LEFT
			visible				when(dvarInt(st_hud_sph_on) > 0)
			decoration
		}

		itemDef 
		{
			name				"tesla_text"
			type				ITEM_TYPE_TEXT
			rect 				4 2 0 0		
			exp					rect Y( 2 + (dvarInt(st_hud_enemy_counter_on)) * 15 + (dvarInt(st_hud_sph_on)) * 15 )
			exp 				text(locString("MOD_TESLA") + dvarString("st_hud_tesla_kills"))		//multiple exp's (expressions?) can be defined for different functions
			forecolor			1 1 1 1
			textscale			TEXTSIZE_DEFAULT
			textstyle			ITEM_TEXTSTYLE_SHADOWED
			textfont			UI_FONT_NORMAL
			textalign			ITEM_ALIGN_TOP_LEFT
			visible				when(dvarInt(st_hud_tesla_on) > 0)
			decoration
		}
		
	}

	menuDef 
	{
		name "sprintMeter"
		fullScreen MENU_FALSE
		visible when(dvarInt(st_drawsprint) > 0)
		rect 0 0 40 10 HORIZONTAL_ALIGN_CENTER VERTICAL_ALIGN_CENTER


		itemDef 
		{
			name "sprintRect"
			type			ITEM_TYPE_OWNERDRAW
			visible MENU_TRUE
			rect 0 30 62 4
			background "white"
			forecolor 0.0 0.0 0.0 .8
			backcolor 0.0 0.0 0.0 .8
			ownerdraw CG_PLAYER_SPRINT_BACK
			decoration
			exp rect W(62 * (dvarInt("has_longersprint") + 1))
			exp rect X(-62 * (dvarInt("has_longersprint") + 1) / 2)
		}

		itemDef 
		{
			name "sprintRect"
			type			ITEM_TYPE_OWNERDRAW
			visible MENU_TRUE
			rect 1 31 60 2
			background		"white"
			forecolor 0.6 0.6 0.6 .8
			ownerdraw CG_PLAYER_SPRINT_METER
			decoration
			exp rect X(-60 * (dvarInt("has_longersprint") + 1)  / 2)
		}
	}

	menuDef 
	{
		name			"mod_timers"
		rect 			0 0 0 0 HORIZONTAL_ALIGN_USER_RIGHT VERTICAL_ALIGN_USER_TOP
		fullscreen		0
		visible			1

		itemDef 
		{
			name		"strat_tester_version"
			rect 		-4 2 0 0
			forecolor 	1 1 1 1
			type 		ITEM_TYPE_TEXT
			textstyle	ITEM_TEXTSTYLE_SHADOWED
			textscale 	TEXTSIZE_TITLE
			textfont	UI_FONT_EXTRABIG
			textalign	ITEM_ALIGN_TOP_RIGHT
			exp			rect Y(2 + (dvarInt("cg_drawFPS") * 18) + (dvarInt("cg_drawFPS") * dvarInt("onlinegame") * 9))
			exp			text("Strat Tester " + dvarString("st_version"));
			visible		1	
		}

		itemDef
		{
			name		"round_timer"
			rect 		-4 2 0 0
			exp			rect Y(2 + (dvarInt("cg_drawFPS") * 18) + (dvarInt("cg_drawFPS") * dvarInt("onlinegame") * 9) + 25)
			forecolor 	1 1 1 1
			type 		ITEM_TYPE_TEXT
			textstyle	ITEM_TEXTSTYLE_SHADOWED
			textscale 	TEXTSIZE_DEFAULT
			textfont	UI_FONT_NORMAL
			textalign	ITEM_ALIGN_TOP_RIGHT
			exp			text(locString("MOD_ROUND_TIME") + dvarString("hud_round_time"))
			visible 	when(dvarInt(st_hud_timer) > 0)
			visible		1	
		}
	}

	menuDef
	{
		name				"zone_name"
		rect				0 0 0 0 HORIZONTAL_ALIGN_USER_LEFT VERTICAL_ALIGN_USER_BOTTOM
		fullscreen			0
		visible				when(dvarString("st_hud_zone_health_bar") =="zone" || dvarString("st_hud_zone_health_bar") == "both")

		itemDef
		{
			name				"zone_name_text"
			type				ITEM_TYPE_TEXT
			rect 				4 -112.5 0 0
			exp					rect Y(-112.5 + ((dvarString("st_hud_zone_health_bar") != "both") * 16))
			forecolor			1 1 1 1
			textscale			TEXTSIZE_DEFAULT
			textstyle			ITEM_TEXTSTYLE_SHADOWED
			textfont			UI_FONT_NORMAL
			textalign			ITEM_ALIGN_LEFT
			exp					text(locString(toUpper(dvarString("st_hud_zone_name"))))
			visible				1
			decoration

			state
			{
				name			"fadein"
				forecolor 		1 1 1 1
			}
			
			state
			{
				name 			"fadeout"
				forecolor 		1 1 1 0
			}
		}
	}

	menuDef
	{
		name				"health_bar"
		rect				0 -111.5 0 0 HORIZONTAL_ALIGN_USER_LEFT VERTICAL_ALIGN_USER_BOTTOM
		fullscreen			0
		visible				when(dvarString("st_hud_zone_health_bar") == "health" || dvarString("st_hud_zone_health_bar") == "both")

		itemDef
		{
			name				"health_bar_background_image"
			type				ITEM_TYPE_IMAGE
			style				WINDOW_STYLE_SHADER
			rect				0 0 114 14
			foreColor			0 0 0 0.5
			background			"white"
			visible				1
			decoration
		}

		itemDef
		{
			name				"health_bar_image"
			type				ITEM_TYPE_IMAGE
			style				WINDOW_STYLE_SHADER
			rect				2 2 110 10
			exp					rect W(dvarInt("st_hud_health_bar_width"))
			foreColor			1 1 1 0.85
			background			"white"
			visible				1
			decoration
		}

		itemDef
		{
			name				"health_bar_value"
			type				ITEM_TYPE_TEXT
			rect 				57 13 0 0
			foreColor			1 1 1 1
			textScale			TEXTSIZE_SMALL
			textStyle			ITEM_TEXTSTYLE_SHADOWED
			textFont			UI_FONT_NORMAL
			textalign			ITEM_ALIGN_CENTER
			exp					text(dvarInt("st_hud_health_bar_value"))
			visible				1
			decoration
		}
	}
}
